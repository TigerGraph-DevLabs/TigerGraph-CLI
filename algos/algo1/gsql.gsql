CREATE QUERY bc_subquery (VERTEX source, SET<STRING> v_type, SET<STRING> e_type, INT max_hops) RETURNS (MapAccum<VERTEX, FLOAT>) {{

	SumAccum<FLOAT> @sigma;              
	SumAccum<FLOAT> @delta;              
	MaxAccum<INT> @dist;                 
	SumAccum<INT> @@currDist = 0;
	MapAccum<VERTEX, FLOAT> @@MapDelta;   

	All = {{v_type}};
	Start = {{source}};
	Start = SELECT s FROM Start:s 
			ACCUM s.@sigma = 1, s.@dist = 0;
 
# traverse in the order of increasing distance and calculate @sigma and @dist
	WHILE (Start.size()>0) LIMIT max_hops DO		# explore up to (maxHops) hops FROM s
		@@currDist += 1;
		Start = SELECT t FROM Start:s -(e_type:e)-> v_type:t
				WHERE t.@dist < 0
				ACCUM t.@sigma += s.@sigma,
					t.@dist = @@currDist;  
	END;
  
	@@currDist += -1;
	Start = SELECT s FROM All:s
			WHERE s.@dist == @@currDist;
	
# traverse in the order of non-increasing distance and calculate @delta
	WHILE (@@currDist>0) DO
		@@currDist += -1;
		Start = SELECT s FROM Start:s -(e_type:e)-> v_type:t
				WHERE t.@dist == s.@dist-1
				ACCUM t.@delta += t.@sigma/s.@sigma*(1+s.@delta);
  
		Start = SELECT s FROM All:s
				WHERE s.@dist == @@currDist;	         
	END;

	Start = SELECT s FROM All:s
			ACCUM
				CASE WHEN s!=source THEN
						@@MapDelta += (s->s.@delta/2)
				ELSE @@MapDelta += (s->0)
				END;

	return @@MapDelta;
 }}