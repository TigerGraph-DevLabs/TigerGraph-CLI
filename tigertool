#!bin/python3

# the webdriver for login part
from selenium import webdriver 
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys 
from selenium.webdriver import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.utils import ChromeType

# Proxy Selenium : Intercept callbacks and requests
from seleniumwire import webdriver 

# System Calls 
import sys
import time 
import os 
import glob
import json
import requests
import importlib
import re

# Arg Parser
import argparse 

# Crypting the creds.bank
from base64 import b64encode, b64decode
#from simplecrypt import encrypt, decrypt

# Fail Gracefully 
import signal


# Styling
from rich import print
from time import sleep
from rich.console import Console
from rich.table import Table

console = Console(log_path=False)





PREFIX_CURSOR_UP = "__GSQL__MOVE__CURSOR___UP__"
PREFIX_CLEAN_LINE = "__GSQL__CLEAN__LINE__"
PREFIX_INTERACT = "__GSQL__INTERACT__"
PREFIX_RET = "__GSQL__RETURN__CODE__"
PREFIX_COOKIE = "__GSQL__COOKIES__"


FILE_PATTERN = re.compile("@[^@]*[^;,]")
PROGRESS_PATTERN = re.compile("\\[=*\\s*\\]\\s[0-9]+%.*")
COMPLETE_PATTERN = re.compile("\\[=*\\s*\\]\\s100%[^l]*")
TOKEN_PATTERN = re.compile("- Token: ([^ ]+) expire at: (.+)")


res = requests.get("https://api.github.com/repos/tigergraph/gsql-graph-algorithms/contents/algorithms/schema-free")
algos = {}
for e in res.json():
    if ".gsql" in e["name"]:
        algos[e["name"]] = e["download_url"]

NULL_MODE = 0
VERTEX_MODE = 1
EDGE_MODE = 2
GRAPH_MODE = 3
JOB_MODE = 4
QUERY_MODE = 5
TUPLE_MODE = 6

CATALOG_MODES = {
    "Vertex Types": VERTEX_MODE,
    "Edge Types": EDGE_MODE,
    "Graphs": GRAPH_MODE,
    "Jobs": JOB_MODE,
    "Queries": QUERY_MODE,
    "User defined tuples": TUPLE_MODE
}


def _is_mode_line(line):

    return line.endswith(":")


def _get_current_mode(line):

    return CATALOG_MODES.get(line[:-1], NULL_MODE)



# ToDo : 
# 0. Move to native requests => Faster !!!
# 1. Check login failures 
# 2. Add SSO and Linkedin ? + $ paid 
# 3. add password expired 
# 4. handle all exceptions

mail = ""
password = ""
hasher = 'tgcloudcli@2021'

class suppress_stdout_stderr(object):
    '''
    A context manager for doing a "deep suppression" of stdout and stderr in 
    Python, i.e. will suppress all print, even if the print originates in a 
    compiled C/Fortran sub-function.
       This will not suppress raised exceptions, since exceptions are printed
    to stderr just before a script exits, and after the context manager has
    exited (at least, I think that is why it lets exceptions through).      

    '''
    def __init__(self):
        # Open a pair of null files
        self.null_fds =  [os.open(os.devnull,os.O_RDWR) for x in range(2)]
        # Save the actual stdout (1) and stderr (2) file descriptors.
        self.save_fds = [os.dup(1), os.dup(2)]

    def __enter__(self):
        # Assign the null pointers to stdout and stderr.
        os.dup2(self.null_fds[0],1)
        os.dup2(self.null_fds[1],2)

    def __exit__(self, *_):
        # Re-assign the real stdout/stderr back to (1) and (2)
        os.dup2(self.save_fds[0],1)
        os.dup2(self.save_fds[1],2)
        # Close all file descriptors
        for fd in self.null_fds + self.save_fds:
            os.close(fd)

def cliargs():
    """
    Function that handles the args
    """
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers() 

    # Login Parser 
    loginparser = subparser.add_parser('login', help='Login to tgcloud.io')
    loginparser.add_argument('-email',default="",help='Email address account for tgcloud.io')
    loginparser.add_argument('-password',default="",help='Password for tgcloud.io')
    loginparser.add_argument('-save',default="n", nargs='?',help='(Optional) save credentials (y/n)')
    loginparser.add_argument('-o',default="stdout",choices=["stdout","json"],help='Output for the tigertool', nargs='?')
    loginparser.set_defaults(func=login)


    # ops Parser
    opsparser = subparser.add_parser('li', help='Login to tgcloud.io')
    opsparser.add_argument('-email',default="",help='Email address account for tgcloud.io')

    # List Parser 
    listparser = subparser.add_parser('list')
    listparser.set_defaults(func=list_machine)
    listparser.add_argument('-activeonly',default="y",choices=["y","n"],help='hide terminated Boxes', nargs='?')
    listparser.add_argument('-o',default="stdout",choices=["stdout","json"],help='Output for the tigertool', nargs='?')
   

    # Algos Parser 
    algoparser = subparser.add_parser('algos')
    algoparser.set_defaults(func=list_algos)
    # algoparser.add_argument('-activeonly',default="y",choices=["y","n"],help='hide terminated Boxes', nargs='?')
    # algoparser.add_argument('-o',default="stdout",choices=["stdout","json"],help='Output for the tigertool', nargs='?')
   
    # Demo Parser 
    demoparser = subparser.add_parser('demos')
    demoparser.set_defaults(func=list_demos)
    # demoparser.add_argument('-activeonly',default="y",choices=["y","n"],help='hide terminated Boxes', nargs='?')
    # demoparser.add_argument('-o',default="stdout",choices=["stdout","json"],help='Output for the tigertool', nargs='?')
    

    # Fast Api Parser
    fastparser = subparser.add_parser('api')
    fastparser.set_defaults(func=api_mode)

    # End Of parsers
    args = parser.parse_args()
    args.func(args)


from flask import Flask, request
from argparse import ArgumentParser
#from flask_cors import CORS, cross_origin

def api_mode(args):
    app = Flask(__name__)
    #cors = CORS(app)
#    app.config['CORS_HEADERS'] = 'Content-Type'

    @app.route("/")
    def read_root():
        return {"Hello": "tgcloud"}



    @app.route("/loadtobox",methods=["POST"])
    #@cross_origin()
    def tgcloud_loadtobox():
        if request.method == "POST":
           
            server = request.form.get("host") or ""
            user = request.form.get("username") or ""
            password = request.form.get("password") or ""
            graph = request.form.get("graph") or ""
            algo  = request.form.get("algo") or ""
            print(algo)
            
            import requests
            gsql = requests.get(algos[algo]).text.replace("{"," FOR GRAPH {} {{".format(graph),1)
            import re
            queryName = re.search('CREATE QUERY(.*)\(', gsql)
            print(queryName.group(1))
            gsql1="use GRAPH "+graph+"\n"+gsql+"INSTALL QUERY {}".format(queryName.group(1))
            # gsql2="use GRAPH "+graph+"\n"+requests.get("https://raw.githubusercontent.com/TigerGraph-OSS/AMLSim_Python_Lab/main/db_scripts/query/label_prop.gsql").text.replace("AMLSim",graph)
           
            import pyTigerGraphBeta as tg
            try:
                conn = tg.TigerGraphConnection(host=server,graphname=graph,username=user,password=password,version="3.1.0")
                res = conn.gsql(gsql1)
                print(res)
            except:
                return {"False":"Done"}    
            # res2 = conn.gsql(gsql2)
            # print(res2)
            return {"True":"Done"}
    @app.route("/loginbox",methods=["POST"])
    #@cross_origin()
    def tgcloud_box():
        if request.method == "POST":
            server = request.form.get("host") or ""
            user = request.form.get("username") or ""
            password = request.form.get("password") or ""
            print(server)
            print(user)
            print(password)
            import time 
            # time.sleep(5)
            import pyTigerGraphBeta as tg
            conn = tg.TigerGraphConnection(host=server,graphname="MyGraph",username=user,password=password,version="3.1.0")
            import re

            catss = "".join(conn.gsql("ls"))
            res = re.search('- Graph (.*)\(', catss)
            print(res.group(1))

            algos_select = ''
            for algo in algos:
                algos_select +='<option value="{}">{}</option>'.format(algo,algo)
            return {"value":res.group(1),'algos':algos_select}



    @app.route("/ops",methods=["POST"])
    #@cross_origin()
    def tgcloud_ops():
        if request.method == "POST":
            token = request.form.get("token") or ""
            action = request.form.get("action") or ""
            id_machine = request.form.get("id_machine") or ""
            headers = {
                'authority': 'tgcloud.io',
                'accept': 'application/json, text/plain, */*',
                'authorization': token,
                'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
                'content-type': 'application/json',
                'origin': 'https://tgcloud.io',
                'sec-fetch-site': 'same-origin',
                'sec-fetch-mode': 'cors',
                'sec-fetch-dest': 'empty',
                'referer': 'https://tgcloud.io/app/solutions',
                'accept-language': 'en-US,en;q=0.9,ar;q=0.8',
            }
            
            response = requests.post('https://tgcloud.io/api/solution/{}/{}'.format(action,id_machine), headers=headers)
            if response.status_code == 200:
                if response.json()["Error"] == False:
                    result = response.json()
                    return result
            else:
                print(response.status_code)
                return {"error":response.status_code}


    @app.route("/list",methods=["POST"])
#    @cross_origin()
    def tgcloud_listing():
        if request.method == "POST":
            token = request.form.get("token") or ""
            headers = {
                'authority': 'tgcloud.io',
                'accept': 'application/json, text/plain, */*',
                'authorization': token,
                'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
                'content-type': 'application/json',
                'origin': 'https://tgcloud.io',
                'sec-fetch-site': 'same-origin',
                'sec-fetch-mode': 'cors',
                'sec-fetch-dest': 'empty',
                'referer': 'https://tgcloud.io/app/solutions',
                'accept-language': 'en-US,en;q=0.9,ar;q=0.8',
            }
            response = requests.get('https://tgcloud.io/api/solution', headers=headers)
            if response.status_code == 200:
                if response.json()["Error"] == False:
                    result = response.json()
                    return result
            else:
                print(response.status_code)
                return {"error":response.status_code}

    @app.route("/login", methods=['POST'])
    #@cross_origin()
    def tgcloud_login():
        if request.method == 'POST':
            userName = request.form.get('username') or ""
            passWord = request.form.get('password') or ""
            args = {}
            args["email"] = userName
            args["password"] = passWord
            args["o"] = "api"
            response = login(args)
            print(response)
            return response
    app.run(debug=True,host="0.0.0.0")


def get_bearer():
    """
    get bearer stored

    Returns:
        [type]: [description]
    """
    # try catch ? bearer not found or file not 
    f = open('creds.bank',"rb")
    res = b64decode(f.read())
    return res

def ops_machine(args):
    """
    Start Stop Terminate and Archive

    Args:
        action ([type]): [description]
        id_machine ([type]): [description]
        bearer ([type]): [description]
    """
    action = args.action
    id_machine = args.id
    bearer = get_bearer()
    headers = {
        'authority': 'tgcloud.io',
        'accept': 'application/json, text/plain, */*',
        'authorization': bearer,
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
        'content-type': 'application/json',
        'origin': 'https://tgcloud.io',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': 'https://tgcloud.io/app/solutions',
        'accept-language': 'en-US,en;q=0.9,ar;q=0.8',
    }

    if action == 'terminate':
        response = requests.delete('https://tgcloud.io/api/solution/{}/{}'.format("destroy",id_machine), headers=headers)
    else:
        response = requests.post('https://tgcloud.io/api/solution/{}/{}'.format(action,id_machine), headers=headers)
    if response.status_code == 200:
        try:
            print("[bold green]tgcloud response[/] {}".format(response.json()["Message"]))
        except Exception as e :
            print("[bold red]tgcloud response[/]  {}".format(e))
    elif response.status_code == 401:
        print("[bold red]tgcloud response[/]  Please re-login ")

def create_machine(args):
    """
    Create a tgcloud machine

    Args:
        args ([type]): [description]
    """
    data = {"Name":"default","Tag":"blank","InitialPassword":"default","DomainPrefix":"domain","Description":"","Platform":"aws","InstanceType":"TG.Free","Region":"us-west-1","FirewallRules":[{"AllowedCIDR":["0.0.0.0/0"],"FromPort":1,"ToPort":65535,"Protocol":"tcp"}],"DiskGBPerNode":50,"PartitionFactor":1,"ReplicationFactor":1,"Version":"3.0.6","StarterKit":"Blank v3"}
    
    data["Name"] = console.input("[bold red]Solution Name[/]? ")
    data["Tag"] = console.input("[bold red]Solution Tag[/]? ( optional ) ")
    data["DomainPrefix"] = console.input("[bold red]Solution url[/]? ( <your_value>.i.tgcloud.io ) ")
    data["InitialPassword"] = console.input("[bold red]Solution Password[/]? ",password=True)
    data["Description"] = console.input("[bold red]Solution Description[/]? ( optional ) ")
    with open('conf.json', 'w') as outfile:
        json.dump(data, outfile)    

    bearer = get_bearer()
    headers =  {
        'authority': 'tgcloud.io',
        'accept': 'application/json, text/plain, */*',
        'authorization': '{}'.format(bearer.decode("utf8").replace("\n","")),
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
        'content-type': 'application/json',
        'origin': 'https://tgcloud.io',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': 'https://tgcloud.io/app/solutions/create',
        'accept-language': 'en-US,en;q=0.9,ar;q=0.8',
        
    }
    
    response = requests.post('https://tgcloud.io/api/solution/create', headers=headers,json=data)
    if response.status_code == 200:
        print("[bold green]tgcloud response[/] {}".format(response.json()["Message"]))
    elif response.json()["Error"] == True and "authenticate" in response.json()["Message"]:
        print("You should relogin use ./tigertool login") 
    else:
        print(response.text)

def table_printer(title,rows):
    """
    Table printer to show tgcloud boxes

    Args:
        title ([type]): [description]
        rows ([type]): [description]
    """
    table = Table(title=title)
    table.add_column("ID", justify="right", style="cyan", no_wrap=True)
    table.add_column("Machine", style="magenta")
    table.add_column("Solution", justify="right", style="green")
    table.add_column("Status", justify="right", style="green")
    for row in rows:
        # table.add_row("ID", "Mach", "Status")
        table.add_row(row["ID"], row["Machine"],row["Solution"],row["Status"])
    # console = Console()
    console.print(table)

def list_machine(args):
    """
    List machines in tgcloud

    Args:
        args ([type]): [description]

    Returns:
        [type]: [description]
    """
    output = args.o
    activeonly = args.activeonly
    bearer = get_bearer()
    headers = {
        'authority': 'tgcloud.io',
        'accept': 'application/json, text/plain, */*',
        'authorization': bearer,
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
        'content-type': 'application/json',
        'origin': 'https://tgcloud.io',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': 'https://tgcloud.io/app/solutions',
        'accept-language': 'en-US,en;q=0.9,ar;q=0.8',
    }

    response = requests.get('https://tgcloud.io/api/solution', headers=headers)
    if response.status_code == 200:
        if response.json()["Error"] == False:
            result = response.json()
            list_macs = []
            for res in result["Result"]:
                
                if activeonly == "y" and res["State"] == "terminated":
                    continue
                list_macs.append({
                    "ID":res["ID"],
                    "Machine":res["Name"],
                    "Solution":res["Tag"],
                    "Status":res["State"],
                    "createAt":res["CreatedAt"],
                    })
            if output == "json":
                print('{{"error":false,"result":{}}}'.format(list_macs))
            else:
                table_printer("tgcloud solutions",list_macs)
            return result
    elif response.json()["Error"] == True and "authenticate" in response.json()["Message"]:
        if output == "json":
            print('{"error":true,"message":"Re-Login to tgcloud"}')
        else:
            print("You should relogin use ./tigertool login") 

def login_wizard():
    """
    Login wizard inputs

    Returns:
        [type]: [description]
    """
    from rich.console import Console
    console = Console()
    mail = console.input("What is [i]your[/i] [bold red]tgcloud user[/]? ")
    password = console.input("What is [i]your[/i] [bold red]tgcloud password[/]? ",password=True)
    save  = console.input("Do you want to save [i]your[/i] [bold red]credentials[/]? (y/n) ")
    return mail,password,save

def help():
    print("Help")

def login(args):
    """
    Login function

    Args:
        args ([type]): [description]

    Returns:
        [type]: [description]
    """
    print(args)
    
    if args:
        try:
            mail = args.email
            password = args.password 
            save = args.save or "n" 
            output = args.o
        except:
            mail = args['email']
            password = args['password']
            output = "api"
            save = "n"
    if output == "api" and (mail =="" or password ==""):
        return {"error":"true","message":"missinig parameters"}
    if output == "json" and (mail =="" or password ==""):
        print('{"error":true,"message":"missinig parameters"}')
        exit()
    elif output == "stdout":
        if mail == "":
            mail = console.input("What is [i]your[/i] [bold red]tgcloud user[/]? ")
        if password == "":
            password = console.input("What is [i]your[/i] [bold red]tgcloud password[/]? ",password=True)
        if save =="":
            save  = console.input("Do you want to save [i]your[/i] [bold red]credentials[/]? (y/n) ")

    def wait_loading():
        """ 
        Wait for selenium page to be ready 
        """
        return driver.execute_script('return document.readyState;') != 'complete' 

    options = webdriver.ChromeOptions()
    #options.add_argument("--no-sandbox")
    options.add_argument("--headless")
    #options.add_argument("--disable-dev-shm-using")
    # with suppress_stdout_stderr():
    driver = webdriver.Chrome(ChromeDriverManager().install(),chrome_options=options)
    
    def cli_login(driver,mail,password,save,output):
        driver.get("https://tgcloud.io/")
        while not(wait_loading):
            pass
        delay = 20
        try:
            myElem = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.XPATH, "//button[contains(@class,'login-btn')]"))) #noqa
        except:
            print("Error with user/psw")
            return -1
        btn = driver.find_element_by_xpath("//button[contains(@class,'login-btn')]")
        driver.execute_script("arguments[0].click();", btn)
        while not(wait_loading):
            pass
        time.sleep(3)
        myElem2 = None
        while not myElem2:
            try:
                myElem2 = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.XPATH, "//input[@name='email']"))) #noqa
            except:
                return -1
            time.sleep(0.5)
        print("Page Loaded")
        time.sleep(2)
        Login=driver.find_element_by_name("email")
        Password=driver.find_element_by_name("password")
        Login.send_keys(mail)
        Password.send_keys(password)
        Password.send_keys(Keys.RETURN)
        ree = ""
        print(driver.current_url)
        # for request in driver.requests:
        #     #if request.response:
        #     print(str(request.url))
        try:
            WebDriverWait(driver, 30).until(EC.url_contains("id_token="))
        except Exception as e:
            print(e)
            driver.close()
            return {"status":"error"}
        ree = driver.current_url
        
        if "access_token=" in ree:
            result_token = "Bearer {}".format(ree.split("access_token=")[1].split("&")[0].strip()) 
            # print(result_token)
            driver.quit()
            #f = open("creds.bank","wb")
            #f.write(b64encode( result_token))
            #f.close()
            if output == "json":
                print('{"error":false,"message":"login successful"}')
                return True
            elif output == "api":
                return {"Hello":"tgcloud","token":result_token}
        else:
            driver.quit()
            if output == "json":
                print('{"error":true,"message":"login failed"}')
                return False
            elif output == "api":
                return {"Error":"KO"}

    if output == "json" or output == "api":
        response = cli_login(driver,mail,password,save,output)
        return response
    else:
        with console.status("[bold green]Connecting to tgcloud.io ...") as status:  #noqa
            sleep(1)
            console.log("Initialzing communication ...")
            driver.get("https://tgcloud.io/")
            while not(wait_loading):
                pass
            delay = 20
            try:
                myElem = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.XPATH, "//button[contains(@class,'login-btn')]"))) #noqa
            except:
                return -1
            btn = driver.find_element_by_xpath("//button[contains(@class,'login-btn')]")
            driver.execute_script("arguments[0].click();", btn)
            console.log(f"Logging in tgcloud.io  using : {mail} ...")
            while not(wait_loading):
                pass
            myElem2 = None
            while not myElem2:
                try:
                    myElem2 = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.XPATH, "//input[@name='email']"))) #noqa
                except:
                    return -1
                time.sleep(0.5)
            time.sleep(2)
            Login=driver.find_element_by_name("email")
            Password=driver.find_element_by_name("password")
            Login.send_keys(mail)
            Password.send_keys(password)
            Password.send_keys(Keys.RETURN)
            console.log(f"Roaring  ...") 
            ree = ""
            WebDriverWait(driver, 30).until(EC.url_contains("id_token="))
            ree = driver.current_url
            
            #===================== END Login
            if "access_token=" in ree:
                result_token = "Bearer {}".format(ree.split("access_token=")[1].split("&")[0].strip()) 
                # print(result_token)
                driver.quit()
#                f = open("creds.bank","wb")
#                f.write(b64encode(result_token))
#                f.close()
                console.log(f"Login Succesful :smiley:") 
                return result_token
            else:
                print("Login Failed !")
                driver.quit()
                return -1

def archive(args):
    """
    archive machine 
    action /archive

    Args:
        args ([type]): [description]
    """
    pass

def list_algos(args):
    """
    lists algos

    Args:
        args ([type]): [description]
    """   
    modules_by_id = {}

    for view_folder in sorted([view.split('/')[-1] for (view, _, _) in os.walk('algos') if view != 'algos']):
        try:
            mod = importlib.import_module(f'algos.{view_folder}')
            
            if hasattr(mod, 'start'):
                nfo = mod.info() if hasattr(mod, 'info') else {'name': view_folder}
                mod_id = nfo['id'] if 'id' in nfo else nfo['name']
                nfo_resolved = {
                    'name': view_folder,
                    'tags': [],
                    **nfo,
                    'id': mod_id,
                    'module': mod,
                }
                
                modules_by_id[mod_id] = nfo_resolved
        except Exception as e :  # noqa: E722
            pass
    sorted_mods = sorted(modules_by_id.values(), key=lambda nfo: nfo['id'])
    for i in range(len(sorted_mods)):
        sorted_mods[i]['index'] = i
    for e in modules_by_id:
        print("ID  : [bold green] "+e+" [/] Algo Name : [bold green] " + modules_by_id[e]["name"]+"[/]")
    res = modules_by_id
    demo = ""
    while (demo not in res):
        demo = console.input("What is [i] the [/i] [bold red]algo to load [/]? ")
    with open('conf.json') as json_file:
        conf = json.load(json_file)

    server = console.input("[bold red]server url [/]? ({}) ".format("https://{}.i.tgcloud.io".format(conf["DomainPrefix"]))) or "https://{}.i.tgcloud.io".format(conf["DomainPrefix"])
    graphname = console.input("[bold red]graph name [/]? (MyGraph)") or "MyGraph"
    user = console.input("[bold red]user [/]? (tigergraph)") or 'tigergraph'
    password = console.input("[bold red]password [/]?  (*******)",password=True) or 'R4phuss456'
    version = console.input("[bold red]version [/]?  (3.0.6)") or '3.1.0'
    # print(graphname,server,user,password,version)
    res[demo]["module"].start(graphname,server,user,password,version)

def list_demos(args):
    """
    lists demos

    Args:
        args ([type]): [description]
    """   
    modules_by_id = {}

    for view_folder in sorted([view.split('/')[-1] for (view, _, _) in os.walk('templates') if view != 'templates']):
        try:
            mod = importlib.import_module(f'templates.{view_folder}')
            
            if hasattr(mod, 'start'):
                nfo = mod.info() if hasattr(mod, 'info') else {'name': view_folder}
                mod_id = nfo['id'] if 'id' in nfo else nfo['name']
                nfo_resolved = {
                    'name': view_folder,
                    'tags': [],
                    **nfo,
                    'id': mod_id,
                    'module': mod,
                }
                
                modules_by_id[mod_id] = nfo_resolved
        except Exception as e :  # noqa: E722
            pass
    sorted_mods = sorted(modules_by_id.values(), key=lambda nfo: nfo['id'])
    for i in range(len(sorted_mods)):
        sorted_mods[i]['index'] = i
    for e in modules_by_id:
        print("ID  : [bold green] "+e+" [/] Demo Name : [bold green] " + modules_by_id[e]["name"]+"[/]")
    res = modules_by_id
    demo = ""
    while (demo not in res):
        demo = console.input("What is [i] the [/i] [bold red]demo to load [/]? ")
    with open('conf.json') as json_file:
        conf = json.load(json_file)

    server = console.input("[bold red]server url [/]? ({}) ".format("https://{}.i.tgcloud.io".format(conf["DomainPrefix"]))) or "https://{}.i.tgcloud.io".format(conf["DomainPrefix"])
    graphname = console.input("[bold red]graph name [/]? (MyGraph)") or "MyGraph"
    user = console.input("[bold red]user [/]? (tigergraph)") or 'tigergraph'
    password = console.input("[bold red]password [/]?  (*******)",password=True) or 'R4phuss456'
    version = console.input("[bold red]version [/]?  (3.0.6)") or '3.1.0'
    # print(graphname,server,user,password,version)
    import pyTigerGraphBeta as tg
    conn = tg.TigerGraphConnection(host=server,graphname=graphname,username=user,password=password,version=version)
    print(catalog(conn.gsql("ls")))
    # res[demo]["module"].start(graphname,server,user,password,version)

def signal_handler(sig, frame):
    """
        Function to fail gracefully
    """
    print('\nterminating TigerTool!')
    sys.exit(0)


def catalog(lines):

    vertices = []
    edges = []
    graphs = []
    jobs = []
    queries = []
    tuples = []
    print(lines)
    current_mode = NULL_MODE

    for line in lines:
        line = line.strip()
        if _is_mode_line(line):
            current_mode = _get_current_mode(line)
            continue

        if line.startswith("- "):
            line = line[2:]
            if current_mode == VERTEX_MODE:
                e = line.find("(")
                vertices.append(line[7:e])
            elif current_mode == EDGE_MODE:
                s = line.find("EDGE ") + 5
                e = line.find("(")
                edges.append(line[s:e])
            elif current_mode == GRAPH_MODE:
                s = line.find("Graph ") + 6
                e = line.find("(")
                graphs.append(line[s:e])
            elif current_mode == JOB_MODE:
                s = line.find("JOB ") + 4
                e = line.find(" FOR GRAPH")
                jobs.append(line[s:e])
            elif current_mode == QUERY_MODE:
                e = line.find("(")
                queries.append(line[:e])
            elif current_mode == TUPLE_MODE:
                e = line.find("(")
                tuples.append(line[:e].strip())
    return {
        "vertices": vertices,
        "edges": edges,
        "graphs": graphs,
        "jobs": jobs,
        "queries": queries,
        "tuples": tuples
    }




signal.signal(signal.SIGINT, signal_handler)
if __name__ == "__main__":
    args = cliargs()
